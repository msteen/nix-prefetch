:man source: nix-prefetch
:man version: @version@
:man manual: Command Reference

= nix-prefetch(1)

== Name

nix-prefetch - Prefetch any fetcher function call, e.g. package sources

== Synopsis

[subs="verbatim,quotes"]
 *nix-prefetch* [(*-A* | *--attr*) <attr>] [(*-E* | *--expr*) <expr>] [(*-i* | *--index*) <index>] [(*-F* | *--fetcher*) (<file> | <attr>)]
              [(*-f* | *--file*) <file>] [*--fetchurl*] [*--force-https*]
              [*--arg* <name> <value>] [*--argstr* <name> <value>] [*-I* <path>] [*--option* <name> <value>]
              [(*-t* | *--type* | *--hash-algo*) <hash-algo>] [(*-h* | *--hash*) <hash>]
              [*--input* <input-type>] [*--output* <output-type>] [*--print-urls*] [*--print-path*]
              [*--compute-hash*] [*--check-store*] [*-s* | *--silent*] [*-q* | *--quiet*] [*-v* | *--verbose*] [*-vv* | *--debug*] ...
              ([*-f* | *--file*] <file> | [*-A* | *--attr*] <attr> | [*-E* | *--expr*] <expr> | <url>) [<hash>]
              [ *--experimental-features* | *--extra-experimental-features* ]
              [*--help* | *--autocomplete* | *--eval* <expr>]
              [*--*] [*--<name>* ((*-f* | *--file*) <file> | (*-A* | *--attr*) <attr> | (*-E* | *--expr*) <expr> | <str>)] ...
 *nix-prefetch* [(*-f* | *--file*) <file>] [*--deep*] [*-s* | *--silent*] [*-v* | *--verbose*] [*-vv* | *--debug*] ... (*-l* | *--list*)
 *nix-prefetch* *--help*
 *nix-prefetch* *--version*

== Options

All options can be repeated with the last value taken,
and can placed both before and after the parameters.

*-f* <file>, *--file* <file>::
  When either an attribute or expression is given it has to be a path to Nixpkgs,
  otherwise it can be a file directly pointing to a fetcher function or package derivation.

*-A* <attr>, *--attr* <attr>::
  An attribute path relative to the _pkgs_ of the imported Nixpkgs.

*-E* <expr>, *--expr* <expr>::
  A Nix expression with the _pkgs_ of the imported Nixpkgs put into scope,
  evaluating to either a fetcher function or package derivation.

*-i* <index>, *--index* <index>::
  Which element of the list of sources should be used when multiple sources are available.

*-F* (<file> | <attr>), *--fetcher* (<file> | <attr>)::
  When the fetcher of the source cannot be automatically determined,
  this option can be used to pass it manually instead.

*--fetchurl*::
  Fetch only the URL. This converts e.g. the fetcher _fetchFromGitHub_ to _fetchurl_ for its URL,
  and the hash options will be applied to fetchurl instead. The name argument will be copied over.

*--force-https*::
  Rewrite HTTP to HTTPS URLs, if the fetcher allows it [*default*: 'true']. No check is done whether HTTPS is actually supported.

*--arg* <name> <value>::
  Just like *nix-instantiate* and *nix-build*, when the expression passed to *nix-prefetch* results in a function,
  it will automatically be called, but not all arguments might have default values,
  so using *--arg* a value for them can still be supplied.

*--argstr* <name> <value>::
  This option is just like *--arg*, except that value will be considered a Nix string rather than a Nix expression.

*-I* <path>::
  Add a path to the Nix search path. See the *NIX_PATH* environment variable for more information.
  Paths added through *-I* take precedence over *NIX_PATH*.

*--option* <name> <value>::
  Set the Nix configuration <name> to <value>. This overrides the settings in the Nix configuration file.
  See *nix.conf(5)* for more information.

*-t* <hash-algo>, *--type* <hash-algo>, *--hash-algo* <hash-algo>::
  What algorithm should be used for the output hash of the resulting derivation.
  The following algorithms are allowed: 'md5' (deprecated), 'sha1', 'sha256', or 'sha512' [*default*: 'sha256'].

*-h* <hash>, *--hash* <hash>::
  When the output hash of the resulting derivation is already known,
  it can be used to check whether it is already exists within the Nix store.

*--input* <input-type>::
  Specify what type of input should be read from 'stdin', which will be passed as fetcher arguments. The following types are available:

  'nix';;
    A Nix attribute set.

  'json';;
    A JSON object.

  'shell';;
    Lines of name/value pairs separated by an '=' (equals) sign.

*--output* <output-type>::
  Specify what type of output should be written to 'stdout' [*default*: 'raw']. The following types are available:

  'nix';;
    The arguments passed to the fetcher function as a Nix attribute set.

  'json';;
    The arguments passed to the fetcher function as a JSON object.

  'shell';;
    The arguments passed to the fetcher function as lines of name/value pairs separated by an '=' (equals) sign.

  'raw';;
    The output hash and, if the *--print-path* option is passed, the output path as well.

*--print-urls*::
  Print the URLs fetched as part of the derivation. Only applicable to *--output* 'raw'.

*--print-path*::
  Print the output path of the resulting derivation. Only applicable to *--output* 'raw'.

*--compute-hash*::
  Whether to compute the hash [*default*: 'true'].

*--check-store*::
  Check whether the Nix store already contains the output path of the resulting derivation.
  This can be an useful optimization when 'nix-prefetch' is used in automated update scripts,
  which might try and prefetch things that have not actually been updated and are already installed on the system.

*--autocomplete*::
  List the arguments that can be passed to the fetcher function.

*--eval* <expr>::
  Evaluate the Nix expression that should define a function getting an attribute set of the references Nix packages set,
  the original fetcher, and the new fetcher (i.e. prefetcher). This option is necessary, because some of the information cannot
  be represented as JSON and are thus only available at runtime. It allows further intergration with other tools.

*-l*, *--list*::
  List the available fetchers in Nixpkgs.

*--deep*::
  Rather than only listing the top-level fetchers, deep search Nixpkgs for fetchers (slow).

*--experimental-features*::
  Set the Nix experimental-features setting.

*--extra-experimental-features*::
  Append to the Nix experimental-features setting.

*-s*, *--silent*::
  No output to 'stderr'.

*-q*, *--quiet*::
  No additional output to 'stderr'.

*-v*, *--verbose*::
  Verbose output to 'stderr'.

*-vv*, *--debug*::
  Even more verbose output to 'stderr' (meant for debugging purposes).

*--help*::
  Show help message.

*--version*::
  Show version information.

== Examples

[subs="verbatim,quotes"]
 *nix-prefetch* hello.src
 *nix-prefetch* \'{ stdenv, fetchurl }: stdenv.mkDerivation rec {
                  name = "test";
                  src = fetchurl { url = http://ftpmirror.gnu.org/hello/hello-2.10.tar.gz; };
                }'
 *nix-prefetch* hello *--check-store* *--verbose*
 *nix-prefetch* git *--check-store* *--verbose*
 *nix-prefetch* fetchurl *--urls* *--expr* \'[ mirror://gnu/hello/hello-2.10.tar.gz ]'
 *nix-prefetch* \'{ name }: pkgs.${name}' *--argstr* name fetchurl *--url* \'mirror://gnu/hello/hello-2.10.tar.gz'
 *nix-prefetch* openraPackages.engines.bleed *--fetchurl* *--rev* master
 *nix-prefetch* hello 0000000000000000000000000000000000000000000000000000
 *nix-prefetch* hello_rs.cargoDeps *--fetcher* \'<nixpkgs/pkgs/build-support/rust/fetchCargoTarball.nix>'
 *nix-prefetch* *--list* *--deep*
 *nix-prefetch* fetchFromGitHub *--help*
 *nix-prefetch* \'(import <nixpkgs> { system = "i686-linux"; }).scilab-bin'

== Author

*Matthijs Steen*
